git --version

git status  -----> Fatal error

git init   ------> Initialize empty git repository (It uses .git as hidden file in it).

git status   ------> It shows the commits are taken or not (shows files in red color).

git add .    ------> It adds the file to staging portion then you will perform commit operation.

git status   ------> Now it shows the commits (shows files in green color).


....................NOW WE HAVE TO SET THE AUTHOR IDENTITY IN THIS SYSTEM..........................

git config --global user.name "Basant"   ---------> Here --global denotes the name is used in every directory.

git config --global user.email "basant@gmail.com"   --------> Here --global denotes the email is used in every directory.

....................NOW THE IDENTITY IS ASSIGNED AND WE WILL CONTINUE THE COMMIT PORTION.......................


git commit -m "version 1"   -------> Here (version 1) is the message you want to given to this file and the file commits.

git log   --------> It shows the commit Id and the Author details, Date and Time of changing code.


.....................NOW CHANGE SOME CONTENTS IN FILE AND SAVE IT............................

git commit -m "version 2"   --------> It is modified file and commit it to git.

git status   --------> It checks the status of the file.

git log   --------> It shows the Information about all the change on the particular file and we can also go checks our previous modified file.


....................TO CHECK THE HOST NAME AND EMAIL.....................

git config --global user.name

git config --global user.email

.........................................................................


Now, we have to create the New Repository in GitHub and then connect the Git with GitHub and for this click on repository and then go to (â€¦or create a new repository on the command line) and copy the (git remote add origin) line and the (ssh link) in the upper side and add both the commands and paste it to the git with an space and then copy the next command (git push -u origin master) and paste in the git it shows error because there is no key present in it. So, we are generating and key for it.

Now, go to (setting) and then select (ssh and jpg key) and then go to (connecting to GitHub using ssh key) and then go to (Generating a new SSH key and adding it to the ssh-agent) and then go to (Generating a new ssh key) copy the text of 2nd step and then add your email as uploaded in git.

And the run the command on git (eval $(ssh-agent -s) to show the agent pid (this portion is not necessary for beginners).

then go to (Adding your SSH key to the ssh-agent) section and then go to step 3 and click on (Adding a new SSH key to your GitHub account) and then go to (Adding a new SSH key to your account) section copy the step 1 command (clip < ~/.ssh/id_ed25519.pub) and paste it in git and then paste the same command on the search panel and then copy the text of that search panel and then go to (ssh and gpg keys) in the setting and then click on (New SSH key) and fill the heading of that key and then paste the text in the description box and generate the key. 

Now we have run the command (git push -u origin master) on the git and it do not show error because the ssh key is generated and the git is linked with the GitHub and the files are pushed in the GitHub successfully.

Now, If we edit file in GitHub and then we have to pull the files of git then we will run the command (git pull origin master) to pull all the updated file on git.


.........................................................................

Now we have to check the updated file what we have edited in it.
use command
--> git status (it shows the uncommit files)
--> git diff Utility.txt  or  git diff   (it shows the updated item of the file)
--> git add . 

AFTER ADD A FILE THEN IT WILL NOT SHOWS THE UPDATED ITEM WHEN RUN THE COMMAND ( git diff Utility.txt ).

--> git diff --staged Utility.txt   (to check the updated item of file after run the command add . )
--> git status   (it shows the modified file)

IF WE HAVE TO REMOVE THE UPDATED CHANGE FROM THE GIT THEN WE HAVE TO RUN THE COMMAND

--> git status 
--> git reset Utility.txt   (it resets the file to the second last commit)
--> git status   (it shows the file in red color)
--> git checkout Utility.txt   (it removes the last updated item from the file)


............................................................................

* --> git add -a (stages All)
* --> add . (stages new and modified, without deleted)
* --> git add -u (stages modified and deleted, without new)


............................................................................

HOW TO CLONE THE FILES FROM GITHUB 
Open git bash on that folder

--> ls -la (it used to list the items of the file)
           (it having (.git/) which stores all the hidden files and all information or changes about the file)

--> git clone SSH_link_of_selected_file_of_github 


............................................................................

IGNORING FILES IN GIT BY ADDING .gitignore FILE

--> touch .gitignore   (it is used to make a blank file on the folder, and this (.gitignore) includes the files which are not in used which have to ignore)

--> ls -la   (it is used to list all the files of that folder)
--> notepad .gitignore   (it is used to open (.gitignore) file in the notepad and write the name of the files which have to ignore)


............................................................................

BRANCHES IN GIT AND HOW TO DELETE THESE BRANCHES

For understanding Branches in git make a new folder and open it in git bash terminal.
Now make two txt files on this folder and then we run the commands

--> git init   (it is used to make empty git repository, it having .git hidden files)
--> ls -la   (to show the list of file which includes .git file in it)
--> git status
--> git add .
--> git commit -m "initial commit"
--> git log
--> git status

Now make a new repository in the GitHub and them link it with git. To linking it copy the ssh file path and then run these commands.

--> git remote add origin ssh_link_from_github
--> git push -u origin master

Now we have to make an different branch which is different from master branch named that branch and do the different things in it and these changes are done in another branch which do not having any impact on the original branch it is different from it and shows the branches in GitHub.

--> git branch   (it shows the branch present in the terminal)
--> git branch login-system   
--> git branch
--> git checkout login-system   (it switched master branch to login-system branch)
--> git branch

Now we have to make another text file in that folder and having the different data in it.

--> git status
--> git add .
--> git commit -m "login-system"
--> git log
--> git push origin login-system   (here in place of master it uses login-system, because we are in login-system branch)
--> git branch
--> git checkout master   (to again switch the branch to master)
--> git branch

Now we have to merge both the branches in one branch then we have to run the commands

--> git merge login-system   (used to merge both the branches)
--> git push -u origin master   (used to push the files on the GitHub)

Now we have to delete the unused branches from the git and GitHub.

--> git branch -d login-system   (it is used to delete the login-system from the git bash repository)
--> git branch
--> git push origin --delete login-system   (it is used to delete the login-system from the GitHub)
